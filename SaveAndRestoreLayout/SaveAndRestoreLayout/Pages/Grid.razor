@page "/grid"

@using System.Text.Json
@using SaveAndRestoreLayout.Data
@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime

<h2>Save and Restore the grid's layout</h2>



@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid Data="@forecasts"
                @ref=GridRef
                CssClass="mw-1100" 
                PageSizeSelectorVisible="true" 
                PageSizeSelectorAllRowsItemVisible="true"   
                ColumnResizeMode="GridColumnResizeMode.NextColumn"    
                ShowGroupPanel="true" ShowFilterRow="true" 
                LayoutAutoLoading=Grid_LayoutAutoLoading 
                LayoutAutoSaving=Grid_LayoutAutoSaving > 
        <Columns>
            <DxGridDataColumn Caption="Date" FieldName="Date" />
            <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
              <DxGridDataColumn Caption="Summary" FieldName="Summary" />
        </Columns>
    </DxGrid>
}


@code {

    #region Variables

    private WeatherForecast[]? forecasts;
    IGrid GridRef;
    string LocalStorageKey = "sampleKey";
    private IEnumerable<string> Layouts = new List<string>();
    private IEnumerable<string> selectedLayout = new List<string>();
    public IEnumerable<string> SelectedLayout {
        get { return selectedLayout; }
        set {
            selectedLayout = value;
            InvokeAsync(StateHasChanged);
        }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

   async Task Grid_LayoutAutoLoading(GridPersistentLayoutEventArgs e) {
        e.Layout = await LoadLayoutFromLocalStorageAsync();
    }


    async Task Grid_LayoutAutoSaving(GridPersistentLayoutEventArgs e) {
        await SaveLayoutToLocalStorageAsync(e.Layout);
    }


    async Task<GridPersistentLayout> LoadLayoutFromLocalStorageAsync() {
        try {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", LocalStorageKey);
            return JsonSerializer.Deserialize<GridPersistentLayout>(json);
        } catch {
            // Mute exceptions
            return null;
        }
    }


    async Task SaveLayoutToLocalStorageAsync(GridPersistentLayout layout) {
        try {
            var json = JsonSerializer.Serialize(layout);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, json);
        } catch {
            // Mute exceptions
        }
    }

    async Task RemoveLayoutFromLocalStorageAsync() {
        try {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", LocalStorageKey);
        } catch {
            // Mute exceptions
        }
    }


   async Task ReloadPageButton_ClickAsync() {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
    async Task ResetLayoutButton_ClickAsync() {
        await RemoveLayoutFromLocalStorageAsync();
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
    void ShowColumnChooser_Click() {
        GridRef.ShowColumnChooser(".show-column-chooser-button");
    }
}