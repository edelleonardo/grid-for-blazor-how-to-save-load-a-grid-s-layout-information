@page "/grid"

@using System.Text.Json
@using SaveAndRestoreLayout.Data
@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime
@inject UserLayoutManager CurrentLayout

<h2>Save and Restore the grid's layout</h2>



@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
    <div class="row p-2">
        <div class="col-10">
            <p>Save layout automatically <button class="btn btn-light" @onclick="@(async () => { await JSRuntime.InvokeVoidAsync("location.reload"); })">Reload page</button></p>

                <DxGrid Data="@forecasts"
                @ref=GridRef
                CssClass="mw-1100" 
                PageSizeSelectorVisible="true" 
                PageSizeSelectorAllRowsItemVisible="true"   
                ColumnResizeMode="GridColumnResizeMode.NextColumn"    
                ShowGroupPanel="true" ShowFilterRow="true" 
                LayoutAutoLoading=Grid_LayoutAutoLoading 
                LayoutAutoSaving=Grid_LayoutAutoSaving > 
        <Columns>
            <DxGridDataColumn Caption="Date" FieldName="Date" />
            <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
              <DxGridDataColumn Caption="Summary" FieldName="Summary" />
        </Columns>
    </DxGrid>
        </div>
        <div class="col-2">
            <button class="btn btn-light" @onclick="@(async () => { CurrentLayout.UpdateCurrentLayout(""); await JSRuntime.InvokeVoidAsync("location.reload"); })">Reset layout</button>
        </div>
    </div>
    <div class="row p-2">
        <div class="col-10">
            <p>Save layout by a button <button class="btn btn-light" @onclick="@(async () => { await JSRuntime.InvokeVoidAsync("location.reload"); })">Reload page</button></p>

                <DxGrid Data="@forecasts"
                @ref=GridRef
                CssClass="mw-1100" 
                PageSizeSelectorVisible="true" 
                PageSizeSelectorAllRowsItemVisible="true"   
                ColumnResizeMode="GridColumnResizeMode.NextColumn"    
                ShowGroupPanel="true" ShowFilterRow="true" > 
        <Columns>
            <DxGridDataColumn Caption="Date" FieldName="Date" />
            <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
              <DxGridDataColumn Caption="Summary" FieldName="Summary" />
        </Columns>
    </DxGrid>

        </div>
        <div class="col-2">
            Available layouts:
            <DxListBox TData="string" TValue="string" Data="@Layouts" @bind-SelectedItems="@SelectedLayout" SelectionMode="ListBoxSelectionMode.Single">
            </DxListBox>
            <div class="p-2">
                <button class="btn btn-light" @onclick="SaveLayout">Save current layout</button>
            </div>
            @if (SelectedLayout.Count() > 0) {
                <div class="p-2">
                    <button class="btn btn-light" @onclick="LoadLayout">Load layout</button>
                    <button class="btn btn-light" @onclick="RemoveLayout">Remove layout</button>
                </div>
            }
        </div>
    </div>
</div>



}


@code {

    #region Variables

    private WeatherForecast[]? forecasts;
    IGrid GridRef;
    string LocalStorageKey = "sampleKey";
    private IEnumerable<string> Layouts = new List<string>();
    private IEnumerable<string> selectedLayout = new List<string>();
    public IEnumerable<string> SelectedLayout {
        get { return selectedLayout; }
        set {
            selectedLayout = value;
            InvokeAsync(StateHasChanged);
        }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    async Task Grid_LayoutAutoLoading(GridPersistentLayoutEventArgs e) {
        if (!string.IsNullOrEmpty(CurrentLayout.GetCurrentLayout()))
            e.Layout = JsonSerializer.Deserialize<GridPersistentLayout>(CurrentLayout.GetCurrentLayout());
    }


    async Task Grid_LayoutAutoSaving(GridPersistentLayoutEventArgs e) {
        var json = JsonSerializer.Serialize(e.Layout);
         CurrentLayout.UpdateCurrentLayout(json);
    }


  async void SaveLayout() {
        int newLayoutKey = -1;
        if (Layouts.Count() > 0)
            newLayoutKey = Convert.ToInt32(Layouts.ToList()[Layouts.Count() - 1]) + 1;
        else
            newLayoutKey = 0;
        CurrentLayout.AddLayout(JsonSerializer.Serialize(GridRef.SaveLayout()), newLayoutKey.ToString());
        Layouts = CurrentLayout.GetKeyList();
        await InvokeAsync(StateHasChanged);
    }


    void LoadLayout() {
        string selectedLayout = SelectedLayout.ToList()[0];
        string layout = CurrentLayout.GetLayoutByKey(selectedLayout);

        if (!string.IsNullOrEmpty(layout))
        {
            var json = JsonSerializer.Deserialize<GridPersistentLayout>(layout);
            GridRef.LoadLayout(json);
        }
 
    }
    async void RemoveLayout() {
        string selectedLayout = SelectedLayout.ToList()[0];
        CurrentLayout.RemoveLayout(selectedLayout);
        Layouts = CurrentLayout.GetKeyList();
        SelectedLayout = new List<string>();
        await InvokeAsync(StateHasChanged);
    }


    void ShowColumnChooser_Click() {
        GridRef.ShowColumnChooser(".show-column-chooser-button");
    }
}